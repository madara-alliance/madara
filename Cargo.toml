[workspace]
members = [
    # madara
    "madara/crates/client/db",
    "madara/crates/client/exec",
    "madara/crates/client/sync",
    "madara/crates/client/eth",
    "madara/crates/client/rpc",
    "madara/crates/client/gateway/client",
    "madara/crates/client/gateway/server",
    "madara/crates/client/analytics",
    "madara/crates/client/telemetry",
    "madara/crates/client/devnet",
    "madara/crates/client/mempool",
    "madara/crates/client/block_import",
    "madara/crates/node",
    "madara/crates/primitives/block",
    "madara/crates/primitives/convert",
    "madara/crates/primitives/transactions",
    "madara/crates/primitives/class",
    "madara/crates/primitives/gateway",
    "madara/crates/primitives/receipt",
    "madara/crates/primitives/state_update",
    "madara/crates/primitives/chain_config",
    "madara/crates/primitives/utils",
    "madara/crates/proc-macros",
    "madara/crates/tests",
    "madara/crates/cairo-test-contracts",
    "madara/crates/client/block_production",
]
resolver = "2"
# Everything except test-related packages, so that they are not compiled when doing `cargo build`.
default-members = [
    # madara
    "madara/crates/client/db",
    "madara/crates/client/exec",
    "madara/crates/client/sync",
    "madara/crates/client/eth",
    "madara/crates/client/gateway/client",
    "madara/crates/client/gateway/server",
    "madara/crates/client/rpc",
    "madara/crates/client/telemetry",
    "madara/crates/client/devnet",
    "madara/crates/client/mempool",
    "madara/crates/client/block_import",
    "madara/crates/client/analytics",
    "madara/crates/node",
    "madara/crates/primitives/block",
    "madara/crates/primitives/convert",
    "madara/crates/primitives/transactions",
    "madara/crates/primitives/class",
    "madara/crates/primitives/gateway",
    "madara/crates/primitives/receipt",
    "madara/crates/primitives/state_update",
    "madara/crates/primitives/chain_config",
    "madara/crates/primitives/utils",
    "madara/crates/proc-macros",
]

[workspace.lints.rust]
unsafe_code = "forbid"

[workspace.lints.clippy]
print_stdout = "warn"
print_stderr = "warn"
# todo: uncomment these & fix them
# unwrap_used = "warn"
# missing_docs = "warn"

[workspace.metadata.build]
rustflags = ["-C", "symbol-mangling-version=v0"]

[profile.dev]
incremental = true

[profile.release]
panic = "unwind"

[profile.profiling]
inherits = "release"
debug = 1

[profile.production]
codegen-units = 1    # Setting this to 1 allows for more optimizations at the cost of slower compile time
inherits = "release"
lto = "fat"          # Enables Link Time Optimization, enabling more aggressive optimizations across the entire codebase
opt-level = 3        # Optimize for speed regardless of binary size or compile time
rpath = false        # Disables adding rpath to the binary
strip = "symbols"    # Removes debug info and symbold from final binary

[workspace.package]
authors = ["Madara <https://github.com/madara-alliance>"]
homepage = "https://madara.build"
edition = "2021"
repository = "https://github.com/madara-alliance/madara/"
version = "0.7.0"
license = "Apache-2.0"

[workspace.dependencies]
rocksdb = "0.22"
librocksdb-sys = "0.17.0"

# Bonsai trie dependencies
bonsai-trie = { default-features = false, git = "https://github.com/madara-alliance/bonsai-trie", branch = "oss", features = [
    "std",
] }

# Madara proc macros
m-proc-macros = { path = "madara/crates/proc-macros", default-features = false }

# Madara primtitives
mp-block = { path = "madara/crates/primitives/block", default-features = false }
mp-convert = { path = "madara/crates/primitives/convert", default-features = false }
mp-transactions = { path = "madara/crates/primitives/transactions", default-features = false }
mp-class = { path = "madara/crates/primitives/class", default-features = false }
mp-gateway = { path = "madara/crates/primitives/gateway", default-features = false }
mp-receipt = { path = "madara/crates/primitives/receipt", default-features = false }
mp-state-update = { path = "madara/crates/primitives/state_update", default-features = false }
mp-utils = { path = "madara/crates/primitives/utils", default-features = false }
mp-chain-config = { path = "madara/crates/primitives/chain_config", default-features = false }
mp-oracle = { path = "madara/crates/primitives/oracle", default-features = false }

# Madara client
mc-analytics = { path = "madara/crates/client/analytics" }
mc-telemetry = { path = "madara/crates/client/telemetry" }
mc-db = { path = "madara/crates/client/db" }
mc-exec = { path = "madara/crates/client/exec" }
mc-rpc = { path = "madara/crates/client/rpc" }
mc-gateway-client = { path = "madara/crates/client/gateway/client" }
mc-gateway-server = { path = "madara/crates/client/gateway/server" }
mc-sync = { path = "madara/crates/client/sync" }
mc-eth = { path = "madara/crates/client/eth" }
mc-mempool = { path = "madara/crates/client/mempool" }
mc-block-production = { path = "madara/crates/client/block_production" }
mc-block-import = { path = "madara/crates/client/block_import" }
mc-devnet = { path = "madara/crates/client/devnet" }

# Madara misc
m-cairo-test-contracts = { path = "madara/crates/cairo-test-contracts" }

# Starknet dependencies
cairo-vm = "=1.0.1"
starknet-core = "0.12"
starknet-crypto = "0.7"
starknet-providers = "0.12"
starknet-signers = "0.10"
starknet = "0.12.0"

starknet-types-core = { version = "0.1.7", default-features = false, features = [
    "hash",
] }
starknet-types-rpc = "0.7.1"

blockifier = "=0.14.0-rc.0"
starknet_api = "=0.14.0-rc.0"
cairo-lang-starknet-classes = "=2.10.0-rc.1"
cairo-lang-utils = "=2.10.0-rc.1"

alloy = { version = "0.4.0", features = [
    "node-bindings",
    "rpc-types",
    "provider-http",
    "contract",
    "node-bindings",
] }

# Other third party dependencies
paste = "1.0.15"
anyhow = "1.0"
bigdecimal = "0.4.5"
assert_matches = "1.5"
async-trait = "0.1"
base64 = "0.22"
sha3 = "0.10"
bitvec = { version = "1.0", default-features = false, features = ["std"] }
clap = { version = "4.4" }
flate2 = "1.0"
futures = { version = "0.3", default-features = false, features = ["std"] }
jsonrpsee = { version = "0.22", default-features = false, features = [
    "server",
    "client",
] }
tower = { version = "0.4", features = ["util"] }
tower-http = { version = "0.4", features = ["cors"] }
governor = "0.6"
hyper = { version = "1.5.0", features = ["full"] }
hyper-tls = "0.6"
hyper-util = "0.1.9"
http = "1.1.0"
http-body-util = "0.1.2"
ip_network = "0.4"
lazy_static = { version = "1.4", default-features = false }
once_cell = "1.19"
num-traits = "0.2"
num-bigint = "0.4"
primitive-types = "0.12"
rand = "0.8"
indoc = "2"
proc-macro2 = "1.0.86"
quote = "1.0.26"
syn = { version = "2.0.39", features = ["full"] }
reqwest = { version = "0.12", features = ["blocking", "json"] }
rstest = "0.18"
serde = { version = "1.0", default-features = false, features = ["std"] }
serde_with = { version = "3.11", default-features = false, features = [
    "alloc",
    "macros",
] }
serde_json = { version = "1.0", default-features = false, features = ["std"] }
serde_yaml = { version = "0.9.34" }
thiserror = "2.0"
tokio = { version = "1.34", features = ["signal", "rt"] }
tokio-util = "0.7.12"
url = { version = "2.4", features = ["serde"] }
rayon = "1.10"
bincode = "1.3"
fdlimit = "0.3.0"
proptest = "1.5.0"
proptest-derive = "0.5.0"
proptest-state-machine = "0.3.1"
dotenv = "0.15.0"
httpmock = "0.7.0"
tempfile = "3.10.1"
mockall = "0.13.0"
itertools = "0.13.0"
regex = "1.10.5"
bytes = "1.6.0"
crypto-bigint = "0.5.5"

# Instrumentation
opentelemetry = { version = "0.25.0", features = ["metrics", "logs"] }
opentelemetry_sdk = { version = "0.25.0", features = ["rt-tokio", "logs"] }
opentelemetry-stdout = { version = "0.25.0" }
opentelemetry-otlp = { version = "0.25.0", features = [
    "tonic",
    "metrics",
    "logs",
] }
opentelemetry-semantic-conventions = { version = "0.25.0" }
opentelemetry-appender-tracing = { version = "0.25.0", default-features = false }
tracing = { version = "0.1.40", default-features = false }
tracing-core = { version = "0.1.32", default-features = false }
tracing-subscriber = { version = "0.3.18", features = [
    "env-filter",
    "registry",
    "std",
] }
tracing-test = "0.2.5"
tracing-opentelemetry = "0.26.0"

[patch.crates-io]
rocksdb = { git = "https://github.com/madara-alliance/rust-rocksdb", branch = "read-options-set-raw-snapshot" }
librocksdb-sys = { git = "https://github.com/madara-alliance/rust-rocksdb", branch = "read-options-set-raw-snapshot" }

starknet-types-core = { git = "https://github.com/kasarlabs/types-rs.git", branch = "feat-deserialize-v0.1.7" }
starknet-types-rpc = { git = "https://github.com/jbcaron/types-rs.git", branch = "fork" }

starknet-core = { git = "https://github.com/kasarlabs/starknet-rs.git", branch = "fork" }
